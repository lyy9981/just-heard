{"ast":null,"code":"import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { RestLink } from 'apollo-link-rest';\nexport default function createApolloClient(initialState, ctx) {\n  const restLink = new RestLink({\n    uri: process.env.NEXT_PUBLIC_API\n  }); // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: restLink,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"names":["ApolloClient","InMemoryCache","RestLink","createApolloClient","initialState","ctx","restLink","uri","process","env","NEXT_PUBLIC_API","ssrMode","Boolean","link","cache","restore"],"sources":["/Users/yiyi/projects/just-heard/apolloClient.js"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { RestLink } from 'apollo-link-rest'\n\nexport default function createApolloClient(initialState, ctx) {\n  const restLink = new RestLink({ uri: process.env.NEXT_PUBLIC_API })\n\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: restLink,\n    cache: new InMemoryCache().restore(initialState),\n  })\n}\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;EAC5D,MAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;IAAEK,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;EAAnB,CAAb,CAAjB,CAD4D,CAG5D;EACA;;EACA,OAAO,IAAIV,YAAJ,CAAiB;IACtBW,OAAO,EAAEC,OAAO,CAACP,GAAD,CADM;IAEtBQ,IAAI,EAAEP,QAFgB;IAGtBQ,KAAK,EAAE,IAAIb,aAAJ,GAAoBc,OAApB,CAA4BX,YAA5B;EAHe,CAAjB,CAAP;AAKD"},"metadata":{},"sourceType":"module"}