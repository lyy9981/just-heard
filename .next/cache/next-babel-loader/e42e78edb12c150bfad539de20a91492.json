{"ast":null,"code":"var _jsxFileName = \"/Users/yiyi/projects/just-heard/lib/apollo.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient'; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nlet globalApolloClient = null;\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\n\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = () => null; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\n\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  const WithApollo = _ref => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        const {\n          AppTree\n        } = ctx; // When redirecting, the response is finished.\n        // No point in continuing to render\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if dataFromTree is enabled\n\n\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr'); // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloClient\n                })\n              };\n            } // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n\n\n            await getDataFromTree(__jsx(AppTree, _extends({}, props, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 35\n              }\n            })));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, pageProps), {}, {\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"names":["App","Head","ApolloProvider","createApolloClient","globalApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"sources":["/Users/yiyi/projects/just-heard/lib/apollo.js"],"sourcesContent":["import App from 'next/app'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport createApolloClient from '../apolloClient'\n\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = (ctx) => {\n  const inAppContext = Boolean(ctx.ctx)\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n'\n      )\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient ||\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx)\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient\n  }\n\n  return ctx\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState, ctx)\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined)\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const inAppContext = Boolean(ctx.ctx)\n      const { apolloClient } = initOnContext(ctx)\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient }\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } }\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(<AppTree {...props} />)\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient,\n      }\n    }\n  }\n\n  return WithApollo\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}