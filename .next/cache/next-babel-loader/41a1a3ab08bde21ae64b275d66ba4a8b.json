{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"apolloClient\", \"apolloState\"];\n\nvar _this = this,\n    _jsxFileName = \"/Users/yiyi/projects/just-heard/lib/apollo.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient'; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nvar globalApolloClient = null;\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\n\nexport var initOnContext = function initOnContext(ctx) {\n  var inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (true) {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  var apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n\n  apolloClient.toJSON = function () {\n    return null;\n  }; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nvar initApolloClient = function initApolloClient(initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\n\nexport var withApollo = function withApollo() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? false : _ref$ssr;\n\n  return function (PageComponent) {\n    var WithApollo = function WithApollo(_ref2) {\n      var apolloClient = _ref2.apolloClient,\n          apolloState = _ref2.apolloState,\n          pageProps = _objectWithoutProperties(_ref2, _excluded);\n\n      var client;\n\n      if (apolloClient) {\n        // Happens on: getDataFromTree & next.js ssr\n        client = apolloClient;\n      } else {\n        // Happens on: next.js csr\n        client = initApolloClient(apolloState, undefined);\n      }\n\n      return __jsx(ApolloProvider, {\n        client: client,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, __jsx(PageComponent, _extends({}, pageProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      })));\n    }; // Set the correct displayName in development\n\n\n    if (true) {\n      var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n      WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n    }\n\n    if (ssr || PageComponent.getInitialProps) {\n      WithApollo.getInitialProps = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ctx) {\n          var inAppContext, _initOnContext, apolloClient, pageProps, AppTree, _yield$import, getDataFromTree, props;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  inAppContext = Boolean(ctx.ctx);\n                  _initOnContext = initOnContext(ctx), apolloClient = _initOnContext.apolloClient; // Run wrapped getInitialProps methods\n\n                  pageProps = {};\n\n                  if (!PageComponent.getInitialProps) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  _context.next = 6;\n                  return PageComponent.getInitialProps(ctx);\n\n                case 6:\n                  pageProps = _context.sent;\n                  _context.next = 13;\n                  break;\n\n                case 9:\n                  if (!inAppContext) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  _context.next = 12;\n                  return App.getInitialProps(ctx);\n\n                case 12:\n                  pageProps = _context.sent;\n\n                case 13:\n                  if (!false) {\n                    _context.next = 32;\n                    break;\n                  }\n\n                  AppTree = ctx.AppTree; // When redirecting, the response is finished.\n                  // No point in continuing to render\n\n                  if (!(ctx.res && ctx.res.finished)) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", pageProps);\n\n                case 17:\n                  if (!(ssr && AppTree)) {\n                    _context.next = 32;\n                    break;\n                  }\n\n                  _context.prev = 18;\n                  _context.next = 21;\n                  return import('@apollo/react-ssr');\n\n                case 21:\n                  _yield$import = _context.sent;\n                  getDataFromTree = _yield$import.getDataFromTree;\n\n                  if (inAppContext) {\n                    props = _objectSpread(_objectSpread({}, pageProps), {}, {\n                      apolloClient: apolloClient\n                    });\n                  } else {\n                    props = {\n                      pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                        apolloClient: apolloClient\n                      })\n                    };\n                  } // Take the Next.js AppTree, determine which queries are needed to render,\n                  // and fetch them. This method can be pretty slow since it renders\n                  // your entire AppTree once for every query. Check out apollo fragments\n                  // if you want to reduce the number of rerenders.\n                  // https://www.apollographql.com/docs/react/data/fragments/\n\n\n                  _context.next = 26;\n                  return getDataFromTree(__jsx(AppTree, _extends({}, props, {\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 149,\n                      columnNumber: 35\n                    }\n                  })));\n\n                case 26:\n                  _context.next = 31;\n                  break;\n\n                case 28:\n                  _context.prev = 28;\n                  _context.t0 = _context[\"catch\"](18);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 31:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 32:\n                  return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                    // Extract query data from the Apollo store\n                    apolloState: apolloClient.cache.extract(),\n                    // Provide the client for ssr. As soon as this payload\n                    // gets JSON.stringified it will remove itself.\n                    apolloClient: ctx.apolloClient\n                  }));\n\n                case 33:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[18, 28]]);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    }\n\n    return WithApollo;\n  };\n};","map":{"version":3,"names":["App","Head","ApolloProvider","createApolloClient","globalApolloClient","initOnContext","ctx","inAppContext","Boolean","console","warn","apolloClient","initApolloClient","apolloState","toJSON","initialState","withApollo","ssr","PageComponent","WithApollo","pageProps","client","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","rewind","cache","extract"],"sources":["/Users/yiyi/projects/just-heard/lib/apollo.js"],"sourcesContent":["import App from 'next/app'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport createApolloClient from '../apolloClient'\n\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null\n\n/**\n * Installs the Apollo Client on NextPageContext\n * or NextAppContext. Useful if you want to use apolloClient\n * inside getStaticProps, getStaticPaths or getServerSideProps\n * @param {NextPageContext | NextAppContext} ctx\n */\nexport const initOnContext = (ctx) => {\n  const inAppContext = Boolean(ctx.ctx)\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' +\n          'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n'\n      )\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient =\n    ctx.apolloClient ||\n    initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx)\n\n  // We send the Apollo Client as a prop to the component to avoid calling initApollo() twice in the server.\n  // Otherwise, the component would have to call initApollo() again but this\n  // time without the context. Once that happens, the following code will make sure we send\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient\n  }\n\n  return ctx\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState, ctx)\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @param  {Object} withApolloOptions\n * @param  {Boolean} [withApolloOptions.ssr=false]\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined)\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const inAppContext = Boolean(ctx.ctx)\n      const { apolloClient } = initOnContext(ctx)\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient }\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } }\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(<AppTree {...props} />)\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient,\n      }\n    }\n  }\n\n  return WithApollo\n}\n"],"mappings":";;;;;;;;;;;;+CACA,oJ;;;;;;AADA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,kBAAP,MAA+B,iBAA/B,C,CAEA;AACA;;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;EACpC,IAAMC,YAAY,GAAGC,OAAO,CAACF,GAAG,CAACA,GAAL,CAA5B,CADoC,CAGpC;EACA;;EACA,UAA4C;IAC1C,IAAIC,YAAJ,EAAkB;MAChBE,OAAO,CAACC,IAAR,CACE,wGACE,sEAFJ;IAID;EACF,CAZmC,CAcpC;;;EACA,IAAMC,YAAY,GAChBL,GAAG,CAACK,YAAJ,IACAC,gBAAgB,CAACN,GAAG,CAACO,WAAJ,IAAmB,EAApB,EAAwBN,YAAY,GAAGD,GAAG,CAACA,GAAP,GAAaA,GAAjD,CAFlB,CAfoC,CAmBpC;EACA;EACA;EACA;;EACAK,YAAY,CAACG,MAAb,GAAsB;IAAA,OAAM,IAAN;EAAA,CAAtB,CAvBoC,CAyBpC;EACA;EACA;;;EACAR,GAAG,CAACK,YAAJ,GAAmBA,YAAnB;;EACA,IAAIJ,YAAJ,EAAkB;IAChBD,GAAG,CAACA,GAAJ,CAAQK,YAAR,GAAuBA,YAAvB;EACD;;EAED,OAAOL,GAAP;AACD,CAlCM;AAoCP;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACG,YAAD,EAAeT,GAAf,EAAuB;EAC9C;EACA;EACA,WAAmC;IACjC,OAAOH,kBAAkB,CAACY,YAAD,EAAeT,GAAf,CAAzB;EACD,CAL6C,CAO9C;;;EACA,IAAI,CAACF,kBAAL,EAAyB;IACvBA,kBAAkB,GAAGD,kBAAkB,CAACY,YAAD,EAAeT,GAAf,CAAvC;EACD;;EAED,OAAOF,kBAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAMY,UAAU,GAAG,SAAbA,UAAa;EAAA,+EAAmB,EAAnB;EAAA,oBAAGC,GAAH;EAAA,IAAGA,GAAH,yBAAS,KAAT;;EAAA,OAA0B,UAACC,aAAD,EAAmB;IACrE,IAAMC,UAAU,GAAG,SAAbA,UAAa,QAAiD;MAAA,IAA9CR,YAA8C,SAA9CA,YAA8C;MAAA,IAAhCE,WAAgC,SAAhCA,WAAgC;MAAA,IAAhBO,SAAgB;;MAClE,IAAIC,MAAJ;;MACA,IAAIV,YAAJ,EAAkB;QAChB;QACAU,MAAM,GAAGV,YAAT;MACD,CAHD,MAGO;QACL;QACAU,MAAM,GAAGT,gBAAgB,CAACC,WAAD,EAAcS,SAAd,CAAzB;MACD;;MAED,OACE,MAAC,cAAD;QAAgB,MAAM,EAAED,MAAxB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,aAAD,eAAmBD,SAAnB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GADF,CADF;IAKD,CAfD,CADqE,CAkBrE;;;IACA,UAA2C;MACzC,IAAMG,WAAW,GACfL,aAAa,CAACK,WAAd,IAA6BL,aAAa,CAACM,IAA3C,IAAmD,WADrD;MAEAL,UAAU,CAACI,WAAX,wBAAuCA,WAAvC;IACD;;IAED,IAAIN,GAAG,IAAIC,aAAa,CAACO,eAAzB,EAA0C;MACxCN,UAAU,CAACM,eAAX;QAAA,uEAA6B,iBAAOnB,GAAP;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBACrBC,YADqB,GACNC,OAAO,CAACF,GAAG,CAACA,GAAL,CADD;kBAAA,iBAEFD,aAAa,CAACC,GAAD,CAFX,EAEnBK,YAFmB,kBAEnBA,YAFmB,EAI3B;;kBACIS,SALuB,GAKX,EALW;;kBAAA,KAMvBF,aAAa,CAACO,eANS;oBAAA;oBAAA;kBAAA;;kBAAA;kBAAA,OAOPP,aAAa,CAACO,eAAd,CAA8BnB,GAA9B,CAPO;;gBAAA;kBAOzBc,SAPyB;kBAAA;kBAAA;;gBAAA;kBAAA,KAQhBb,YARgB;oBAAA;oBAAA;kBAAA;;kBAAA;kBAAA,OASPP,GAAG,CAACyB,eAAJ,CAAoBnB,GAApB,CATO;;gBAAA;kBASzBc,SATyB;;gBAAA;kBAAA;oBAAA;oBAAA;kBAAA;;kBAcjBM,OAdiB,GAcLpB,GAdK,CAcjBoB,OAdiB,EAezB;kBACA;;kBAhByB,MAiBrBpB,GAAG,CAACqB,GAAJ,IAAWrB,GAAG,CAACqB,GAAJ,CAAQC,QAjBE;oBAAA;oBAAA;kBAAA;;kBAAA,iCAkBhBR,SAlBgB;;gBAAA;kBAAA,MAsBrBH,GAAG,IAAIS,OAtBc;oBAAA;oBAAA;kBAAA;;kBAAA;kBAAA;kBAAA,OA0Ba,OAAO,mBAAP,CA1Bb;;gBAAA;kBAAA;kBA0BbG,eA1Ba,iBA0BbA,eA1Ba;;kBA+BrB,IAAItB,YAAJ,EAAkB;oBAChBuB,KAAK,mCAAQV,SAAR;sBAAmBT,YAAY,EAAZA;oBAAnB,EAAL;kBACD,CAFD,MAEO;oBACLmB,KAAK,GAAG;sBAAEV,SAAS,kCAAOA,SAAP;wBAAkBT,YAAY,EAAZA;sBAAlB;oBAAX,CAAR;kBACD,CAnCoB,CAqCrB;kBACA;kBACA;kBACA;kBACA;;;kBAzCqB;kBAAA,OA0CfkB,eAAe,CAAC,MAAC,OAAD,eAAaC,KAAb;oBAAA;oBAAA;sBAAA;sBAAA;sBAAA;oBAAA;kBAAA,GAAD,CA1CA;;gBAAA;kBAAA;kBAAA;;gBAAA;kBAAA;kBAAA;kBA4CrB;kBACA;kBACA;kBACArB,OAAO,CAACsB,KAAR,CAAc,uCAAd;;gBA/CqB;kBAkDvB;kBACA;kBACA9B,IAAI,CAAC+B,MAAL;;gBApDuB;kBAAA,iEAyDtBZ,SAzDsB;oBA0DzB;oBACAP,WAAW,EAAEF,YAAY,CAACsB,KAAb,CAAmBC,OAAnB,EA3DY;oBA4DzB;oBACA;oBACAvB,YAAY,EAAEL,GAAG,CAACK;kBA9DO;;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAA7B;;QAAA;UAAA;QAAA;MAAA;IAiED;;IAED,OAAOQ,UAAP;EACD,CA9FyB;AAAA,CAAnB"},"metadata":{},"sourceType":"module"}